variables:
  DEBIAN_FRONTEND: noninteractive
  MESON_BUILD_DIR: "_build"

stages:
  - build
  - release

.base_build_template: &base_build
  stage: build
  image: ubuntu:devel

.ubuntu_deps_install_template: &ubuntu_deps_install
    apt-get update &&
    apt-get install -q -y --no-install-recommends
      build-essential
      docbook-xml
      gettext
      git
      gobject-introspection
      gtk-doc-tools
      libgirepository1.0-dev
      libglib2.0-dev
      libglib2.0-doc
      libgtk-3-dev
      libgtk-3-doc
      libstartup-notification0-dev
      libx11-dev
      libxext-dev
      libxres-dev
      meson
      ninja-build

build:ubuntu:meson:
  <<: *base_build
  before_script:
    - *ubuntu_deps_install
  script:
    - meson setup "${MESON_BUILD_DIR}" -Dgtk_doc=true
    - ninja -C "${MESON_BUILD_DIR}"
    - meson dist -C "${MESON_BUILD_DIR}"
  artifacts:
    name: "${CI_JOB_NAME}-${CI_COMMIT_REF_NAME}"
    when: always
    paths:
      - "${MESON_BUILD_DIR}/meson-dist/${CI_PROJECT_NAME}-*.tar.xz"

release:
  image: ubuntu:devel
  stage: release
  needs:
    - job: "build:ubuntu:meson"
      artifacts: true
  before_script:
    - apt-get update
    - apt-get install -q -y --no-install-recommends
                      ca-certificates
                      curl
  variables:
    GNOME_RELEASE_SERVICE_API_URL: "https://gnome-release-route-gnome-release-service.apps.openshift.gnome.org"
    GNOME_RELEASE_SERVICE_API_INSTALL_MODULE_RELEASE_ENDPOINT: "$GNOME_RELEASE_SERVICE_API_URL/install-module-release"
    TARBALL_ARTIFACT_PATH: "${MESON_BUILD_DIR}/meson-dist/${CI_PROJECT_NAME}-${CI_COMMIT_TAG}.tar.xz"
  id_tokens:
    JWT_TOKEN:
      aud: gnome-release-service
  script:
    - ls -al "${TARBALL_ARTIFACT_PATH}"
    - >
      curl --fail-with-body -X POST "$GNOME_RELEASE_SERVICE_API_INSTALL_MODULE_RELEASE_ENDPOINT"
      -H "Authorization: Bearer $JWT_TOKEN"
      -F "tarball=@${TARBALL_ARTIFACT_PATH}"
  rules:
    - if: $CI_COMMIT_TAG && $CI_COMMIT_REF_PROTECTED
